"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var webpack=_interopDefault(require("webpack")),webpackSources=require("webpack-sources"),path=_interopDefault(require("path")),fs=_interopDefault(require("fs"));class AutoDllPlugin{constructor(e){Object.defineProperty(this,"depkey",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"name",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"manifest",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"output",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"ignore",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"cachename",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"debug",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"makeOptions",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"description",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"flag",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"context",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"compiler",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"webpackOptions",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"deps",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pkgpath",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"timestamp",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"webpack4",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"runWithoutWatch",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),e=e||{},this.depkey=e.depkey||"dependencies",this.name=e.name||"vendor",this.manifest=e.manifest||this.name+".manifest.json",this.output=e.output||".dll",this.ignore=e.ignore||(()=>!0),this.cachename=e.cachename||this.name+".cache.json",this.debug=e.debug||process.env.DEBUG||!1,this.makeOptions=e.makeOptions||(e=>e),this.description="AutoDllPlugin",this.flag="[AutoDLLPlugin]"}apply(e){this.compiler=e,this.context=e.context,this.webpackOptions=e.options,this.pkgpath=path.resolve(this.context,"package.json"),this.deps=this.resolve(),e.options.entry=this.injectEntry(),this.webpack4=Boolean(e.hooks),this.webpack4||(e.plugin("run",this.assertWarning.bind(this)),this.runWithoutWatch||(e.plugin("watch-run",this.plugin.bind(this)),e.plugin("after-plugins",this.applyRefPlugin.bind(this)),e.plugin("compilation",this.applyHtmlPlugin.bind(this))))}plugin(e,t){const i=e.compiler,n=i.contextTimestamps&&i.contextTimestamps[this.pkgpath];if(n)if(n&&!this.timestamp)this.timestamp=n,t(null,null);else if(this.timestamp!==n){this.deps=this.resolve();const e=this.check();e?(this.timestamp=n,t(null,null)):(this.log("Detected deps was update. Rebuild DLL"),webpack(this.make()).run((e,i)=>{if(e)return void t(e,null);this.log("Create DLL successed");this.debug&&console.log(this.renderDeps(),"\n");this.timestamp=n;t(null,null)}))}else this.log("No update"),t(null,null);else{const e=new Date(fs.statSync(this.pkgpath).mtime).getTime(),i=this.check();i?(this.timestamp=e,this.log("Cache was found"),t(null,null)):(this.log("%s, generate new DLL",null===i?"Cache not found":"Cache was out of date"),webpack(this.make()).run((i,n)=>{if(i)return void t(i,null);this.log("Create DLL successed");this.debug&&console.log(this.renderDeps(),"\n");const s=path.resolve(this.context,this.output,this.manifest);const o=Date.now()/1e3-10;fs.utimesSync(s,o,o);this.timestamp=e;t(null,null)}))}}log(e,...t){this.debug&&console.log.apply(console,["%s "+e,this.flag,...t])}injectEntry(){const e=this.webpackOptions.entry;return"string"==typeof e?[this.pkgpath,e]:Array.isArray(e)?(e.unshift(this.pkgpath),e):"object"==typeof e?(Object.keys(e).forEach(t=>{Array.isArray(e[t])?e[t].unshift(this.pkgpath):e[t]=[this.pkgpath,e]}),e):"function"==typeof e?e(this.pkgpath):e}applyRefPlugin(e){new webpack.DllReferencePlugin({context:this.context,manifest:path.resolve(this.context,this.output,this.manifest)}).apply(e)}applyHtmlPlugin(e){const t=this.compiler.outputFileSystem;if(Boolean(t.data)){const i=this.webpackOptions.output.path,n=this.name+".js",s=path.resolve(i,n),o=path.resolve(this.context,this.output,n);if(t.mkdirpSync(i),t.writeFileSync(s,fs.readFileSync(o,"utf-8")),this.webpack4&&e.hooks.htmlWebpackPluginBeforeHtmlGeneration);else{e.plugin("html-webpack-plugin-before-html-generation",(e,t)=>{e.assets.js.unshift("/"+n);t(null,e)})}}}assertWarning(e,t){this.log("The plugin only works on watch mode, skip generate dll."),this.runWithoutWatch=!0,t(null)}renderDeps(){return this.deps.map(e=>"  - "+e).join("\n")}check(){const e=path.resolve(this.context,this.output,this.cachename);try{const t=JSON.parse(fs.readFileSync(e,"utf-8")).sort(),i=t.length;this.log('Check cache file "%s"',path.relative(this.context,e));const n=this.deps.sort(),s=n.length;if(i!==s)return!1;for(let e=0;e<i;e++)if(t[e]!==n[e])return!1;return!0}catch(e){return null}}cache(){const e=this.deps,t=this.cachename,i=this.webpack4;return class n{constructor(){Object.defineProperty(this,"description",{configurable:!0,enumerable:!0,writable:!0,value:void 0}),this.description="WriteDllCachePlugin"}apply(n){i||n.plugin("emit",(i,n)=>{i.assets[t]=new webpackSources.RawSource(JSON.stringify(e));n(null,null)})}}}make(){const e=this.cache(),t={entry:{[this.name]:this.deps},output:{path:path.resolve(this.context,this.output),filename:"[name].js",library:"[name]"},context:this.context,devtool:"none",plugins:[new webpack.DllPlugin({context:this.context,path:path.resolve(this.context,this.output,this.manifest),name:"[name]"}),new e]};return this.webpack4,this.makeOptions(t)}resolve(){try{const e=JSON.parse(fs.readFileSync(this.pkgpath,"utf-8"));return Object.keys(e[this.depkey||{}]).filter(this.ignore)}catch(e){throw new Error(e)}}}exports.default=AutoDllPlugin;
